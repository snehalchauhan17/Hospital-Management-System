<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        JCBS1X1lvj3WLuQhUUyyEA//2Q==
</value>
  </data>
</root>